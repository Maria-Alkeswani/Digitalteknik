library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;

Entity motor is
	port(clk, reset, a, b : in std_logic;
		u0, u1            : out std_logic);
end motor;

architecture moore of motor is
	type state_type is (s0, s1, s2, s3, s4, s5, s6);
	signal present_state, next_state : state_type;
begin
	process(clk)
	begin 
		if(rising_edge(clk)) then
			if reset='1' then
				present_state <= s0;
			else
				present_state <= next_state;
			end if;
		end if;
	end process;
	
	process(present_state, a, b)
	begin
		case present_state is
			when s0 =>  if a ='1' and b = '0' then
							next_state <= s1;
						elsif a ='0' and b = '0' then
							next_state <= s0;
						else 
							next_state <= s6;
						end if;
			when s1 =>  if a ='0' and b = '0' then
							next_state <= s2;
						elsif a ='1' and b = '0' then
							next_state <= s1;
						else 
							next_state <= s6;
						end if;
			when s2 =>  if a ='0' and b = '1' then
							next_state <= s3;
						elsif a ='0' and b = '0' then
							next_state <= s2;
						else 
							next_state <= s6;
						end if;
			when s3 =>  if a ='0' and b = '0' then
							next_state <= s4;
						elsif a ='0' and b = '1' then
							next_state <= s3;
						else 
							next_state <= s6;
						end if;
			when s4 =>  if a ='0' and b = '1' then
							next_state <= s5;
						elsif a ='0' and b = '0' then
							next_state <= s4;
						else 
							next_state <= s6;
						end if;
			when s5 =>  next_state <= s5;
			when s6 =>  next_state <= s6;
			when others =>  next_state <= s6;						
		end case;
	end process;
	process(present_state)
	begin
		case present_state is
			when s6 => u1 <= '0'; u0 <= '1';
			when s5 => u1 <= '1'; u0 <= '0';
			when others => u1 <= '0'; u0 <= '0';
		end case;
	end process;		
end architecture moore;