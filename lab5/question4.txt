-- lab 4 uppgift4
library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;

Entity uppgift4 is
	port(ab : in std_logic_vector(1 downto 0);
		reset : in std_logic;
		clock : in std_logic;
		u : out std_logic_vector(1 downto 0));
end uppgift4;

architecture beh of uppgift4 is
	type state_type is (s0,s1,s2,s3,s4,s5,s6);
	signal present_state, next_state : state_type;
begin
	process(present_state, ab)
	begin
		case present_state is
			when  s0 => if ab = "00" then
							next_state <= s0;
						elsif ab = "10" then
							next_state <= s1;
						else
							next_state <= s6;
						end if;
			when s1 => if ab = "10" then
							next_state <= s1;
						elsif ab = "00" then
							next_state <= s2;
						else
							next_state <= s6;
						end if;
			when s2 => if ab = "00" then
							next_state <= s2;
						elsif ab = "01" then
							next_state <= s3;
						else
							next_state <= s6;
						end if;
			when s3 => if ab = "01" then
							next_state <= s3;
						elsif ab = "00" then
							next_state <= s4;
						else
							next_state <= s6;
						end if;
			when s4 => if ab = "00" then
							next_state <= s4;
						elsif ab = "01" then
							next_state <= s5;
						else
							next_state <= s6;
						end if;
			when s5 => next_state <= s5;
			when s6 => next_state <= s6;
			when others => next_state <= s0;
		end case;
	end process;
	
	process(reset, clock)
	begin
		if reset = '1' then
			present_state <= s0;
		elsif rising_edge(clock) then
			present_state <= next_state;
		end if;
	end process;
	
	process(present_state)
	begin
		case present_state is
			when s5 => u <= "10";
			when s6 => u <= "01";
			when others => u <= "00";
		end case;
	end process;
end architecture beh;