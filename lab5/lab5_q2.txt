library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;

entity tarning is
	port( knapp, clock : in std_logic;
		  res : out std_logic_vector(2 downto 0)
		);
end tarning;

architecture beh of tarning is
	type state is (s0, s1, s2, s3, s4, s5);
	signal present_state, next_state : state;
begin
	process(clock)
	begin
		if rising_edge(clock) then
			present_state <= next_state;
		end if;
	end process;
	process(present_state, knapp)
	begin
		case present_state is
			when s0 =>  if knapp='1' then
							next_state <= s1;
							res <= "010";
						else
							next_state <= s0;
							res <= "001";
						end if;
			when s1 =>  if knapp='1' then
							next_state <= s2;
							res <= "011";
						else
							next_state <= s1;
							res <= "010";
						end if;
			when s2 =>  if knapp='1' then
							next_state <= s3;
							res <= "100";
						else
							next_state <= s2;
							res <= "011";
						end if;
			when s3 =>  if knapp='1' then
							next_state <= s4;
							res <= "101";
						else
							next_state <= s3;
							res <= "100";
						end if;
			when s4 =>  if knapp='1' then
							next_state <= s5;
							res <= "110";
						else
							next_state <= s4;
							res <= "101";
						end if;
			when s5 =>  if knapp='1' then
							next_state <= s0;
							res <= "001";
						else
							next_state <= s5;
							res <= "110";
						end if;
			when others =>  next_state <= s0;
							res <= "001";
		end case;
	end process;
end architecture beh;