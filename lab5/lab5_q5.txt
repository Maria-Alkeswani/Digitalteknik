library IEEE;
use IEEE.STD_LOGIC_1164.ALL;

entity Jonson is
	port (clk, stop, fullB, rev : in std_logic;
			y                   : out std_logic_vector(3 downto 0)
		 );
end Jonson;

architecture beh of Jonson is
	type state is (s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15);
	signal present_state, next_state : state;
begin
	process(clk)
	begin
		if rising_edge(clk) then
			present_state <= next_state;
		end if;
	end process;
	
	process(present_state, stop, fullB, rev) is
	begin
		if stop = '1' then
			next_state <= present_state;
		elsif fullB = '1' then
			if present_state = s0 then
				next_state <= s4;
			else
				next_state <= s0;
			end if;
		elsif rev = '1' then
			case present_state is
				when s0 => next_state <= s7;
				when s1 => next_state <= s0;
				when s2 => next_state <= s1;
				when s3 => next_state <= s2;
				when s4 => next_state <= s3;
				when s5 => next_state <= s4;
				when s6 => next_state <= s5;
				when s7 => next_state <= s6;
				when others => next_state <= s0;
			end case;
		else
			case present_state is
				when s0 => next_state <= s1;
				when s1 => next_state <= s2;
				when s2 => next_state <= s3;
				when s3 => next_state <= s4;
				when s4 => next_state <= s5;
				when s5 => next_state <= s6;
				when s6 => next_state <= s7;
				when others => next_state <= s0;
			end case;
		end if;
	end process;
	
	process(present_state)
	begin
		case present_state is
			when s0  => y <= "0000";
			when s1  => y <= "1000";
			when s2  => y <= "1100";
			when s3  => y <= "1110";
			when s4  => y <= "1111";
			when s5  => y <= "0111";
			when s6  => y <= "0011";
			when s7  => y <= "0001";
			when s8  => y <= "0010";
			when s9  => y <= "0100";
			when s10 => y <= "0101";
			when s11 => y <= "0110";
			when s12 => y <= "1001";
			when s13 => y <= "1010";
			when s14 => y <= "1011";
			when s15 => y <= "1101";
		end case;
	end process;
end architecture beh;